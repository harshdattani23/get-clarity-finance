generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId              String                @id @unique
  email                String                @unique
  username             String?
  investmentExperience InvestmentExperience?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  onboarded            Boolean               @default(false)
  virtualCash          Decimal               @default(100000.00)
  CourseEnrollment     CourseEnrollment[]
  courseProgress       CourseProgress[]
  leaderboardEntries   LeaderboardEntry[]
  holdings             PortfolioHolding[]
  tradingStats         TradingStats?
  achievements         UserAchievement[]
  virtualTrades        VirtualTrade[]
  watchlists           Watchlist[]
}

model CourseProgress {
  id          Int          @id @default(autoincrement())
  userClerkId String
  courseId    String
  lessonId    String
  status      CourseStatus @default(NOT_STARTED)
  completedAt DateTime?
  user        User         @relation(fields: [userClerkId], references: [clerkId])

  @@unique([userClerkId, courseId, lessonId])
}

model PortfolioHolding {
  id           Int      @id @default(autoincrement())
  userClerkId  String
  ticker       String
  quantity     Int
  averagePrice Decimal
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userClerkId], references: [clerkId])

  @@unique([userClerkId, ticker])
}

model VirtualTrade {
  id          Int       @id @default(autoincrement())
  userClerkId String
  ticker      String
  quantity    Int
  price       Decimal
  tradeType   TradeType
  tradedAt    DateTime  @default(now())
  user        User      @relation(fields: [userClerkId], references: [clerkId])
}

model Watchlist {
  id          Int             @id @default(autoincrement())
  userClerkId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  name        String          @default("My Watchlist")
  user        User            @relation(fields: [userClerkId], references: [clerkId])
  items       WatchlistItem[]

  @@unique([userClerkId, name])
}

model WatchlistItem {
  id          Int       @id @default(autoincrement())
  watchlistId Int
  ticker      String
  createdAt   DateTime  @default(now())
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, ticker])
}

model Stock {
  id            Int       @id @default(autoincrement())
  ticker        String    @unique
  name          String
  industry      String?
  indices       String[]
  price         Decimal?
  change        Decimal?
  percentChange Decimal?
  volume        Decimal?
  lastUpdatedAt DateTime?
  avgVolume     Decimal?
  beta          Decimal?
  ceo           String?
  close         Decimal?
  description   String?
  dividendYield Decimal?
  employees     Int?
  eps           Decimal?
  headquarters  String?
  high          Decimal?
  low           Decimal?
  open          Decimal?
  peRatio       Decimal?
  sector        String?
  website       String?
  marketCap     Decimal?
  week52High    Decimal?
  week52Low     Decimal?
  previousClose Decimal?
}

model LeaderboardEntry {
  id               Int               @id @default(autoincrement())
  userClerkId      String
  period           LeaderboardPeriod
  rank             Int
  totalReturn      Decimal
  winRate          Decimal
  totalTrades      Int
  profitableTrades Int
  portfolioValue   Decimal
  calculatedAt     DateTime          @default(now())
  user             User              @relation(fields: [userClerkId], references: [clerkId])

  @@unique([userClerkId, period, calculatedAt])
  @@index([period, rank])
}

model TradingStats {
  id                Int      @id @default(autoincrement())
  userClerkId       String   @unique
  totalTrades       Int      @default(0)
  profitableTrades  Int      @default(0)
  totalProfit       Decimal  @default(0)
  totalLoss         Decimal  @default(0)
  bestTrade         Decimal  @default(0)
  worstTrade        Decimal  @default(0)
  currentStreak     Int      @default(0)
  longestWinStreak  Int      @default(0)
  longestLossStreak Int      @default(0)
  totalVolume       Decimal  @default(0)
  averageHoldTime   Int      @default(0)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userClerkId], references: [clerkId])
}

model Achievement {
  id          String              @id @default(cuid())
  name        String              @unique
  description String
  category    AchievementCategory
  tier        AchievementTier
  icon        String
  requirement Json
  points      Int                 @default(10)
  createdAt   DateTime            @default(now())
  users       UserAchievement[]
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  userClerkId   String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0)
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userClerkId], references: [clerkId])

  @@unique([userClerkId, achievementId])
}

model NewsItem {
  id          String         @id @default(cuid())
  title       String
  summary     String
  sector      String?
  sentiment   NewsSentiment  @default(NEUTRAL)
  language    String         @default("en")
  publishedAt DateTime       @default(now())
  fetchedAt   DateTime       @default(now())
  expiresAt   DateTime
  keyPoints   NewsKeyPoint[]
  sources     NewsSource[]
  tickers     NewsTicker[]

  @@index([sector, publishedAt])
  @@index([fetchedAt])
  @@index([expiresAt])
}

model NewsKeyPoint {
  id         String   @id @default(cuid())
  newsItemId String
  point      String
  order      Int
  newsItem   NewsItem @relation(fields: [newsItemId], references: [id], onDelete: Cascade)

  @@index([newsItemId])
}

model NewsTicker {
  id         String   @id @default(cuid())
  newsItemId String
  ticker     String
  newsItem   NewsItem @relation(fields: [newsItemId], references: [id], onDelete: Cascade)

  @@index([newsItemId])
  @@index([ticker])
}

model NewsSource {
  id         String   @id @default(cuid())
  newsItemId String
  url        String
  domain     String
  title      String?
  newsItem   NewsItem @relation(fields: [newsItemId], references: [id], onDelete: Cascade)

  @@index([newsItemId])
}

model NewsFetchLog {
  id          String      @id @default(cuid())
  sector      String?
  topics      String[]
  status      FetchStatus
  itemsCount  Int         @default(0)
  error       String?
  startedAt   DateTime    @default(now())
  completedAt DateTime?

  @@index([status, startedAt])
}

model SEBIIntermediary {
  id                 String   @id @default(cuid())
  registrationNumber String   @unique
  name               String
  tradeName          String?
  category           String
  subcategory        String?
  validity           String?
  status             String   @default("Active")
  email              String?
  phone              String?
  website            String?
  address            String?
  city               String?
  state              String?
  pincode            String?
  exchanges          String[]
  segments           String[]
  aifCategory        String?
  aifType            String?
  sponsor            String?
  trustee            String?
  fundManager        String?
  lastUpdated        DateTime @default(now())
  dataSource         String   @default("SEBI")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([category])
  @@index([name])
  @@index([registrationNumber])
}

model VerificationLog {
  id               String   @id @default(cuid())
  searchQuery      String
  searchType       String
  found            Boolean
  riskScore        Int?
  legitimacyStatus String?
  intermediaryId   String?
  userAgent        String?
  ipAddress        String?
  createdAt        DateTime @default(now())
}

model FraudReport {
  id                String   @id @default(cuid())
  reportId          String   @unique
  entityName        String
  registrationClaim String?
  fraudType         String
  riskScore         Int
  evidence          Json?
  reportedBy        String?
  status            String   @default("pending")
  sebiReported      Boolean  @default(false)
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([fraudType])
  @@index([status])
}

model Course {
  id               String             @id
  slug             String             @unique
  category         String
  difficulty       CourseDifficulty   @default(BEGINNER)
  estimatedHours   Int                @default(1)
  xpReward         Int                @default(100)
  isPublished      Boolean            @default(false)
  order            Int                @default(0)
  imageUrl         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  CourseEnrollment CourseEnrollment[]
  CourseModule     CourseModule[]

  @@index([category])
  @@index([isPublished])
}

model CourseBadge {
  id               String             @id
  slug             String             @unique
  icon             String
  criteria         Json
  xpValue          Int                @default(100)
  createdAt        DateTime           @default(now())
  CourseEnrollment CourseEnrollment[]
}

model CourseEnrollment {
  id             String           @id
  userClerkId    String
  courseId       String
  status         EnrollmentStatus @default(ENROLLED)
  startedAt      DateTime         @default(now())
  completedAt    DateTime?
  currentStreak  Int              @default(0)
  totalXpEarned  Int              @default(0)
  preferredLang  String           @default("en")
  Course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User           User             @relation(fields: [userClerkId], references: [clerkId], onDelete: Cascade)
  LessonProgress LessonProgress[]
  ModuleProgress ModuleProgress[]
  QuizAttempt    QuizAttempt[]
  CourseBadge    CourseBadge[]

  @@unique([userClerkId, courseId])
  @@index([courseId])
  @@index([userClerkId])
}

model CourseLesson {
  id                String              @id
  moduleId          String
  slug              String
  lessonType        LessonType          @default(CONTENT)
  order             Int                 @default(0)
  xpReward          Int                 @default(25)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  CourseModule      CourseModule        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  CourseQuiz        CourseQuiz?
  LessonInteraction LessonInteraction[]
  LessonProgress    LessonProgress[]

  @@unique([moduleId, order])
  @@unique([moduleId, slug])
  @@index([moduleId])
}

model CourseModule {
  id           String         @id
  courseId     String
  title        String         @default("Untitled")
  slug         String
  order        Int            @default(0)
  difficulty   CourseDifficulty @default(BEGINNER)
  xpReward     Int            @default(50)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  CourseLesson CourseLesson[]
  Course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, order])
  @@unique([courseId, slug])
  @@index([courseId])
}

model CourseQuiz {
  id           String         @id
  lessonId     String         @unique
  passingScore Int            @default(70)
  xpReward     Int            @default(50)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  CourseLesson CourseLesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  QuizAttempt  QuizAttempt[]
  QuizQuestion QuizQuestion[]
}

model LessonInteraction {
  id                      String                    @id
  lessonId                String
  slug                    String
  interactionType         InteractionType
  correctResponse         String?
  xpReward                Int                       @default(10)
  order                   Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  CourseLesson            CourseLesson              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  UserInteractionResponse UserInteractionResponse[]

  @@unique([lessonId, slug])
  @@index([lessonId])
}

model LessonProgress {
  id                      String                    @id
  enrollmentId            String
  lessonId                String
  status                  ProgressStatus            @default(NOT_STARTED)
  startedAt               DateTime?
  completedAt             DateTime?
  xpEarned                Int                       @default(0)
  timeSpent               Int                       @default(0)
  CourseEnrollment        CourseEnrollment          @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  CourseLesson            CourseLesson              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  UserInteractionResponse UserInteractionResponse[]

  @@unique([enrollmentId, lessonId])
  @@index([enrollmentId])
  @@index([lessonId])
}

model ModuleProgress {
  id               String           @id
  enrollmentId     String
  moduleId         String
  status           ProgressStatus   @default(NOT_STARTED)
  startedAt        DateTime?
  completedAt      DateTime?
  xpEarned         Int              @default(0)
  CourseEnrollment CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, moduleId])
  @@index([enrollmentId])
}

model QuizAttempt {
  id               String           @id
  enrollmentId     String
  quizId           String
  score            Int
  passed           Boolean
  answers          Json
  xpEarned         Int              @default(0)
  attemptNumber    Int              @default(1)
  startedAt        DateTime         @default(now())
  completedAt      DateTime?
  CourseEnrollment CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  CourseQuiz       CourseQuiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([enrollmentId])
  @@index([quizId])
}

model QuizQuestion {
  id              String       @id
  quizId          String
  slug            String
  questionType    QuestionType @default(MULTIPLE_CHOICE)
  correctOptionId String?
  order           Int          @default(0)
  points          Int          @default(10)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  CourseQuiz      CourseQuiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([quizId, slug])
  @@index([quizId])
}

model UserInteractionResponse {
  id                String            @id
  progressId        String
  interactionId     String
  response          String
  isCorrect         Boolean?
  xpEarned          Int               @default(0)
  createdAt         DateTime          @default(now())
  LessonInteraction LessonInteraction @relation(fields: [interactionId], references: [id], onDelete: Cascade)
  LessonProgress    LessonProgress    @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@index([interactionId])
  @@index([progressId])
}

enum InvestmentExperience {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum TradeType {
  BUY
  SELL
}

enum LeaderboardPeriod {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

enum AchievementCategory {
  TRADING
  PROFIT
  LEARNING
  STREAK
  PORTFOLIO
  SOCIAL
  SPECIAL
}

enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum NewsSentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum FetchStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum InteractionType {
  SCENARIO
  DECISION
  VERIFICATION
  DRAG_DROP
  SIMULATION
}

enum LessonType {
  CONTENT
  QUIZ
  INTERACTIVE
  VIDEO
  SCENARIO
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SCENARIO
  VERIFICATION
}
