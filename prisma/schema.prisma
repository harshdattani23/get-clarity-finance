generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId              String                @id @unique
  email                String                @unique
  username             String?
  investmentExperience InvestmentExperience?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  onboarded            Boolean               @default(false)
  virtualCash          Decimal               @default(100000.00)
  courseProgress       CourseProgress[]
  holdings             PortfolioHolding[]
  virtualTrades        VirtualTrade[]
  watchlists           Watchlist[]
  leaderboardEntries   LeaderboardEntry[]
  achievements         UserAchievement[]
  tradingStats         TradingStats?
}

model CourseProgress {
  id          Int          @id @default(autoincrement())
  userClerkId String
  courseId    String
  lessonId    String
  status      CourseStatus @default(NOT_STARTED)
  completedAt DateTime?
  user        User         @relation(fields: [userClerkId], references: [clerkId])

  @@unique([userClerkId, courseId, lessonId])
}

model PortfolioHolding {
  id           Int      @id @default(autoincrement())
  userClerkId  String
  ticker       String
  quantity     Int
  averagePrice Decimal
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userClerkId], references: [clerkId])

  @@unique([userClerkId, ticker])
}

model VirtualTrade {
  id          Int       @id @default(autoincrement())
  userClerkId String
  ticker      String
  quantity    Int
  price       Decimal
  tradeType   TradeType
  tradedAt    DateTime  @default(now())
  user        User      @relation(fields: [userClerkId], references: [clerkId])
}

model Watchlist {
  id          Int             @id @default(autoincrement())
  userClerkId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  name        String          @default("My Watchlist")
  user        User            @relation(fields: [userClerkId], references: [clerkId])
  items       WatchlistItem[]

  @@unique([userClerkId, name])
}

model WatchlistItem {
  id          Int       @id @default(autoincrement())
  watchlistId Int
  ticker      String
  createdAt   DateTime  @default(now())
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, ticker])
}

model Stock {
  id            Int       @id @default(autoincrement())
  ticker        String    @unique
  name          String
  industry      String?
  marketCap     Decimal?
  indices       String[]
  price         Decimal?
  change        Decimal?
  percentChange Decimal?
  volume        Decimal?
  avgVolume     Decimal?
  peRatio       Decimal?
  eps           Decimal?
  dividendYield Decimal?
  beta          Decimal?
  high          Decimal?
  low           Decimal?
  open          Decimal?
  close         Decimal?
  previousClose Decimal?
  description   String?
  sector        String?
  website       String?
  ceo           String?
  headquarters  String?
  employees     Int?
  lastUpdatedAt DateTime?
  week52High    Decimal?
  week52Low     Decimal?
}

enum InvestmentExperience {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum TradeType {
  BUY
  SELL
}

// Leaderboard and Achievement Models
model LeaderboardEntry {
  id              Int                @id @default(autoincrement())
  userClerkId     String
  period          LeaderboardPeriod
  rank            Int
  totalReturn     Decimal
  winRate         Decimal
  totalTrades     Int
  profitableTrades Int
  portfolioValue  Decimal
  calculatedAt    DateTime           @default(now())
  user            User              @relation(fields: [userClerkId], references: [clerkId])

  @@unique([userClerkId, period, calculatedAt])
  @@index([period, rank])
}

model TradingStats {
  id                Int      @id @default(autoincrement())
  userClerkId       String   @unique
  totalTrades       Int      @default(0)
  profitableTrades  Int      @default(0)
  totalProfit       Decimal  @default(0)
  totalLoss         Decimal  @default(0)
  bestTrade         Decimal  @default(0)
  worstTrade        Decimal  @default(0)
  currentStreak     Int      @default(0)
  longestWinStreak  Int      @default(0)
  longestLossStreak Int      @default(0)
  totalVolume       Decimal  @default(0)
  averageHoldTime   Int      @default(0) // in hours
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userClerkId], references: [clerkId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  category    AchievementCategory
  tier        AchievementTier
  icon        String            // emoji or icon name
  requirement Json              // JSON object with requirements
  points      Int               @default(10)
  users       UserAchievement[]
  createdAt   DateTime          @default(now())
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  userClerkId   String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0) // Progress percentage (0-100)
  user          User        @relation(fields: [userClerkId], references: [clerkId])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userClerkId, achievementId])
}

enum LeaderboardPeriod {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

enum AchievementCategory {
  TRADING
  PROFIT
  LEARNING
  STREAK
  PORTFOLIO
  SOCIAL
  SPECIAL
}

enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}
